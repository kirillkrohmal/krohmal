1. Реализовать интерфейс

public interface SimpleTree<E extends Comparable<E>> extends Iterable<E> {
    /**
     * Добавить элемент child в parent.
     * Parent может иметь список child.
     * @param parent parent.
     * @param child child.
     * @return
     */
    boolean add(E parent, E child);
}

2. Элемент дерева может иметь множество дочерних элементов.

class Tree<E extends Comparable<E>> implements SimpleTree<E> {

    class Node<E> {
        List<Node<E>> childen;
        E value;
    }

    @Override
    public boolean add(E parent, E child) {
        return false;
    }

    @Override
    public Iterator<E> iterator() {
        return null;
    }
}

метод add - Должен находить элемент parent в дереве по условию compare(node, parent) == 0 и добавлять в него дочерний элемент.

node.children.add(child);

В дереве не могут быть дубликатов.

Итератор должен собрать все элементы в List и возвращать данные из скопированной коллекции.