1. Реализовать интерфейс

public interface SimpleTree<E extends Comparable<E>> extends Iterable<E> {
    /**
     * Добавить элемент child в parent.
     * Parent может иметь список child.
     * @param parent parent.
     * @param child child.
     * @return
     */
    boolean add(E parent, E child);
}

2. Элемент дерева может иметь множество дочерних элементов.

class Tree<E extends Comparable<E>> implements SimpleTree<E> {

    class Node<E> {
        List<Node<E>> childen;
        E value;
    }

    @Override
    public boolean add(E parent, E child) {
        return false;
    }

    @Override
    public Iterator<E> iterator() {
        return null;
    }
}

метод add - Должен находить элемент parent в дереве по условию compare(node, parent) == 0 и добавлять в него
дочерний элемент.

node.children.add(child);

В дереве не могут быть дубликатов.

Итератор должен собрать все элементы в List и возвращать данные из скопированной коллекции.



Как мы видим. Каждый элемент дерева можем быть сам деревом.
 
1. Вам необходимо реализовать интерфейс 
 
package ru.job4j.tree;

import java.util.Optional;

public interface SimpleTree<E extends Comparable<E>> extends Iterable<E> {
    /**
     * Добавить элемент child в parent.
     * Parent может иметь список child.
     * @param parent parent.
     * @param child child.
     * @return
     */
    boolean add(E parent, E child);

    Optional<Node<E>> findBy(E value);
}


2. Элемент дерева может иметь множество дочерних элементов.
package ru.job4j.tree;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Petr Arsentev (parsentev@yandex.ru)
 * @version $Id$
 * @since 0.1
 */
public class Node<E> {
    private final List<Node<E>> children = new ArrayList<>();
    private final E value;

    public Node(final E value) {
        this.value = value;
    }

    public void add(Node<E> child) {
        this.children.add(child);
    }

    public List<Node<E>> leaves() {
        return this.children;
    }

    public boolean eqValue(E that) {
        return this.value.equals(that);
    }
}


метод add - Должен находить элемент parent в дереве по условию compare(node, parent) == 0 и добавлять в него
дочерний элемент.

node.children.add(child);

В дереве не могут быть дубликатов.


Давайте рассмотрим пример реализации метода findBy

В качестве базового алгоритма мы будет использовать алгоритм поиска в ширину.

@Override
public Optional<Node<E>> findBy(E value) {
    Optional<Node<E>> rsl = Optional.empty();
    Queue<Node<E>> data = new LinkedList<>();
    data.offer(this.root);
    while (!data.isEmpty()) {
        Node<E> el = data.poll();
        if (el.eqValue(value)) {
            rsl = Optional.of(el);
            break;
        }
        for (Node<E> child : el.leaves()) {
            data.offer(child);
        }
    }
    return rsl;
}

Смысл этого алгоритма в следующем.
Мы берем очередь и добавляем первый элемент дерева - это корень.
Дальше, если корень не наш элемент мы добавляем все элементы корня.
И так для каждого элемента.

Давайте напишем тест на наш код.

package ru.job4j.tree;

import org.junit.Test;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;

/**
 * @author Petr Arsentev (parsentev@yandex.ru)
 * @version $Id$
 * @since 0.1
 */
public class TreeTest {
    @Test
    public void when6ElFindLastThen6() {
        Tree<Integer> tree = new Tree<>(1);
        tree.add(1, 2);
        tree.add(1, 3);
        tree.add(1, 4);
        tree.add(4, 5);
        tree.add(5, 6);
        assertThat(
                tree.findBy(6).isPresent(),
                is(true)
        );
    }

    @Test
    public void when6ElFindNotExitThenOptionEmpty() {
        Tree<Integer> tree = new Tree<>(1);
        tree.add(1, 2);
        assertThat(
                tree.findBy(7).isPresent(),
                is(false)
        );
    }
}

Вам нужно дореализовать дерево используя этот алгоритм.

Реализуй классы Node, Tree. В классе Tree для начала сделай метод findBy,
а затем в методе add проверяй с помощью findBy есть ли родительский узел в дереве,
если есть, то проверяешь есть ли во всем дереве дочерний узел, который хотят добавить,
если нет, то добавляешь к указанному родительскому узлу - дочерний.

(findBy(parent) != null) - findBy возвращает Optional. Прочти документацию как работать с этим типом.
Такое использование неверное. Метод compare тебе не нужен, потому что если узел будет найден, то findBy тебе
его вернет. тем более, что метод compare написан неверно. Находишь через findBy есть ли в дереве узел со
значением равным parent, и если он есть, то опять таки через findBy находишь есть ли узел в дереве со значением
равным child, если нет такого узла, то к найденному узлу parent добавляешь дочерний узел child.
int len1 = first.toString().length();
int len2 = second.toString().length(); - сравнивать объект по длине их текстового представления, это совершенно
не верно. Прочитай что такое Comparator, Comparable и как реализуются их методы.


А по условиям задачи: В дереве не могут быть дубликатов, т.е. никакие узлы в дереве не должны иметь двух
одинаковых дочерних узлов.

И я ранее тебе писал:  Находишь через findBy есть ли в дереве узел со значением равным parent,
и если он есть, то опять таки через findBy находишь есть ли узел в дереве со значением равным child,
если нет такого узла, то к найденному узлу parent добавляешь дочерний узел child.

Тебе надо написать - если parent есть, а child нет, тогда к parent добавить child.

Находишь через findBy есть ли в дереве узел со значением равным parent, и если он есть,
то опять таки через findBy находишь есть ли узел в дереве со значением равным child, если нет такого узла,
то к найденному узлу parent добавляешь дочерний узел child.

for (Node<E> eNode : node.childen) {
    node.childen.add(eNode);             --> эта запись лишена смысла. Ты берешь дочерние узлы у node, и к нему же обратно их
}                                            добавляешь. Плюс сам по себе node не несет никакого смысла. Тебе надо добавлять
                                             новый дочерний узел к parent'у, который был найден методом findBy.

Все что остается это получить ссылку на найденный узел (findBy(parent).get()) и к списку дочерних узлов этого узла -
добавить новый узел со значением равным child.


1) нужно удалить конструкторы: пустой, интовый и тот что принимает Node. Конструктор должен принимать тип E и сам создавать
корневой узел.

2) не надо кидать throw new NullPointerException(); в методе add. Этот метод возвращает boolean поэтому возвращай false в
случае отсутствия такого parent.

3) в методе add эта строка findBy(parent).get(); - не нужна. Она просто получает ссылку на узел равный parent и ничего с ней
не делает.

4) findBy(parent).get().childen.add((Node<E>) child) - такая запись не верна. Ты приводишь child к типу Node<E>, но этого
нельзя делать потому что child имеет тип E. Поэтому нужно добавлять ссылку на узел который ты создал в
предыдущей строке (node).

public Tree(E e) { node.value = e; } - так писать нельзя, потому что у тебя поле node не инициализировано.
Здесь тебе надо node присвоить ссылку на вновь создаваемый узел.

и написать итератор, он будет работать помещая узлы в очередь, для каждого помещаемого узла, так же помещают
и его дочерние узлы. Принцип показан в методе findBy.

Тебе надо добавлять узлы в очередь, если очередь не пуста значит hasNext возвращает true, а метод next
возвращает очередной элемент из очереди и если у него есть дочерние узлы помещает их в очередь.

1) ты пишешь Node<E> el = data.poll(); - но ведь очередь (data) у тебя пуста. Подумай сам, чтобы бы что-то извлечь из
очереди в нее нужно же что-то положить.

2) в методе next ты пишешь return (E) el.getChilden().iterator(); - этим ты возвращаешь ссылку на итератор,
который будет возвращать дочерние узлы (того узла на который сейчас ссылается переменная el).
Но ведь метод next должен возвращать элементы, а не объект итератор. И не кидай NPE, этот метод не должен его кидать.
Прочти документацию по нему.

3) в методе hasNext тебе надо проверять пуста ли очередь и все.

Тебе надо создать очередь и инициализировать ее как-то. Как это сделать? Логично что надо в очередь добавлять
вершины (узлы) дерева. И логично начать с корня, если он пуст, то и возвращать нечего, т.к. дерево пустое.
Поэтому добавляй корень. А затем в методе hasNext проверяешь есть ли в очереди узлы или нет. А в методе next
возвращаешь первый узел из очереди + проверяешь если у него есть дочерние узлы, то добавляешь их в очередь
(которые затем когда подойдет их очередь будут также извлечены из очереди). Таким образом ты сможешь пройтись по всему дереву.
Проверку сколько дочерних узлов надо начинать с самого начала (с корня) проверяя у каждого у узла
+ условие у тебя сейчас записано не верно.


Проверка удовлетворяет ли дерево условию двоичности, должна проводиться подсчетом числа дочерних элементов у каждого узла,
начиная с корня. Сначала берешь корень и смотришь сколько у него дочерних узлов, если меньше или равно 2, начинаешь
проверять на соответствие этому условию каждый дочерний узел корня, и у него проверяешь дочерние узлы.
И так пока не пройдешь все дерево, либо пока не найдешь узел у которого количество дочерних узлов больше двух,
тогда прерываешь поиск и возвращаешь false.

Методу isBinary параметр не нужен. Он должен начинать искать с корня.

Вот это условие не корректно. Подумай и скажи почему:

if (node1.getChilden().size() > 2) {
    isBinaryTree = true;
}

такое условие не корректно, потому что . ты пишешь если дочерних узлов больше двух, то isBinaryTree = true.
Но двоичным является дерево у которого узлов наоборот не больше двух.

Сейчас у тебя идет подсчет узлов только у дочерних узлов корня, а надо проходить по всему дереву.

Сейчас у тебя подсчет количества дочерних узлов производится только для узлов дочерних по отношению к корню.
А в самом корне и других узлах подсчет не производится. Тебе надо подсчитать дочерние узлы у каждого узла в дереве,
либо пока ты не пройдешь по всем узлам, либо пока не найдешь узел у которого дочерних узлов больше двух.
Проход по всем узлам ты уже реализовывал ранее, подумай.

У тебя сейчас для каждого в очереди isBinaryTree  присваивается проверка меньше ли детей чем два. Это не верно по двум причинам:
1) у двоичного дерева дочерних узлов не больше двух  2) нужно проверять условие, и если их больше двух прерывать поиск и
возвращать false. Сейчас же если у узла дочерних узлов больше двух, а за ним будут следовать узлы у которых это условие не
нарушается, то для них будет присваиваться true, тогда они просто перезапишут false. В итоге ты так и не узнаешь что дерево
не было двоичным.

Плюс в текущей реализации у тебя в очередь помещается только корень, и подсчет узлов идет только для него.

А нужно извлекаешь из очереди по одному узлу, проверяешь если у него дочерних узлов больше двух, то прекращаешь поиск
и возвращаешь false, иначе добавляешь его дочерние узлы в очередь. Чтобы на следующей итерации проверять уже их.
И так пока либо не найдешь узел у которого больше двух дочерних узлов, либо пока в очереди не закончатся узлы
(что будет означать что пройдено все дерево и оно двоичное).

Сейчас у тебя на момент исполнения цикла for в очереди только один узел - корень. Ты проверяешь только число
дочерних узлов только у корня и этим ограничиваешься. А почему другие узлы не проверяешь?

Кирилл, в цикле while ты должен: условие цикла - пока очередь не пуста.

1) извлечь очередной узел из очереди
2) проверить сколько у него дочерних узлов, если больше двух - выходишь из метода возвращаешь false, иначе:
3) добавляешь в очередь все дочерние узлы этого узла.


1) если дерево двоичное isBinary все равно возвращает false, хотя должно быть true
2) если нашел узел с числом дочерних вершин больше двух, то смысла продолжать поиск нет. Дерево уже не двоичное.
3) объясни для чего здесь poll. Какова цель этой инструкции?

else if (node.getChilden().size() <= 2) {
    data.poll();
    data.addAll(elem.childen);
}

