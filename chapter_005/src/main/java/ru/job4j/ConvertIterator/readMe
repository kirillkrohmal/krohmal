Реализовать класс с методом Iterator<Integer> convert(Iterator<Iterator<Integer>> it).

Что из себя представляет запись Iterator<Iterator<Integer>?.

Каждый итератор это последовательность.

Итератор 1 – 4 2 0 4 6 4 9

Итератор 2 – 0 9 8 7 5

Итератор 3 – 1 3 5 6 7 0 9 8 4

Если мы говорим о записи Итератор Итераторов. Значит итератор содержит не конечные значения, а сложенные итераторы.

Итератор - Итератор 1, Итератор 2, Итератор 3.

Метод convert должен принимать объект итератор итератор и возвращать Итератор чисел.

Iterator<Iterator<Integer> - ((4 2 0 4 6 4 9), (0 9 8 7 5), (1 3 5 6 7 0 9 8 4))

Метод должен возвращать

Iterator<Integer> - (4 2 0 4 6 4 9 0 9 8 7 5 1 3 5 6 7 0 9 8 4)

Метод не должен копировать данные. Нужно реализовать итератор, который будет пробегать по вложенными итераторам
без копирования данных.

Пример.

public class Converter {
   Iterator<Integer> convert(Iterator<Iterator<Integer>> it) {
      return new Iterator<Integer>() {
        @Override
        public boolean hasNext() {
           return false;
        }

        @Override
        public Integer next() {
           return null;
        }
     };
   }
}

public class ConverterTest {
    @Test
    public void whenItHasTwoInnerIt() {
        Iterator<Iterator<Integer>> it = Arrays.asList(
            Collections.singletonList(1).iterator(),
            Collections.singletonList(2).iterator()
        ).iterator();
       Iterator<Integer> convert = new Converter().convert(it);
       convert.next();
       int result = convert.next();
       assertThat(result, is(2));
    }
}

По сути логика такая - есть несколько итераторов, надо написать один суммирующий их, но при этом не создавать новый.
Т.е. должны быть методы hasnext(), next() и что-нибудь типа selectIterator(), в котором бы осуществлялся выбор
следующего итератора по условию.

там получается два итератора один над множеством других как только нижний кончается то верхний переходит к следующему
да два поля один глобальный итератор второй текущий если текущий кончился то глобальный
меняет его на следующий если он есть конечно

Да, элементы берутся из итераторов, но это же не значит, что количество элементов возвращаемых итератором равно
какому-нибудь числу, которое им возвращается: допустим итератор возвращает последовательно 1-2-3-4-5, ты должен
получать их через последовательный вызов hasNext -> next, пока hasNext возвращает true. В текущей же реализации
ты берешь какое-то значение возвращаемое итератором и говоришь, что поиск будет осуществляться столько то раз.
Но ведь это совершенно разные не связанные вещи: некое значение возвращаемое итератором и общее количество элементов
, которое будет возвращено итератором. Тебе на входе дан итератор, который при вызове hasNext возвращает true -
если у него еще есть ранее не возвращенный итератор Iterator<Integer>. Сам по себе он не возвращает чисел, но
содержит ссылки на итераторы, которые возвращают числа. Общий смысл действий должен быть таким: если
Iterator<Iterator<Integer>> возвращает true, то ты вызываешь next и получаешь Iterator<Integer> (вот он уже может
возвращать числа), у которого в свою очередь вызываешь hasNext, если true - значит числа к возврату есть, тогда
вызываешь next. Если Iterator<Integer> возвращает false - это значит что в текущем итераторе больше нет чисел, и
необходимо переключиться на следующий итератор.

У тебя iterator и iterator2 не инициализированы, а ты их используешь. Переменная iterator тебе здесь не нужна,
у тебя же уже есть it - в передаваемых параметрах. Переменной iterator2 присвой ссылку на итератор возвращаемый
it - это будет текущий итератор. Далее в методе hasNext проверяй, что если текущий итератор не имеет следующего
элемента, а итератор итераторов имеет-переключись на следующий итератор, иначе верни результат метода hasNext
для текущего итератора.


* selectIterator(), в котором бы осуществлялся выбор следующего итератора по условию.
* У тебя метод next должен возвращать значения из тех итераторов, которые ему были переданы.
* Если в первом итераторе больше нет чисел, то переключиться на второй и возвращать его числа и т.д.
* пока не закончатся итераторы. Метод hasNext должен проверять есть ли у текущего итератора следующий элемент,
* если есть возвращать true, если нет, то проверить есть ли следующий итератор и переключиться на него и проверять
* есть ли числа у него и т.д., если чисел больше нет или итераторов больше нет, то возвратить false.
* Текущая реализация полностью не верная, более того она падает с NPE.
*
* у тебя переменная iterator (текущий выбранный итератор) - тип Iterator<Iterator<Integer>>, а тебе надо Iterator<Integer>.
* Итератор по итераторам у тебя же уже есть - it. Вот полю iterator присвой значение следующего итератора. И в hasNext
* проверяй если у текущего итератора нет больше значений, а у итератора итераторов есть следующий итератор, переключайся на
* следующий итератор, который возвращается итератором итераторов. Иначе проверяй есть ли значение у текущего итератора.



