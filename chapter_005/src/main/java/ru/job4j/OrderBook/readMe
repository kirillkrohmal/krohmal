«Order book» task

Before you start

Please follow these instructions super accurately.

Develop the solution in Java (you can use Maven as a build tool if you want)
The core of the solution should be written without any add-ons to the core of the programming language.
Use only the defined language standard (e.g. you can use all features that you find in a standard JDK).
This means that you can use external libraries, but your program should still produce the required output after
removing those parts. For example, if you would decide to use a logging library then your program would still work
correctly after removing all parts that use the logging library. You can also use JUnit.
Optimize for quality of development and execution speed.
- In general execution time on PC with HDD should be around 6 seconds.

- Be ready to explain and protect all performance optimizations (if there will be any).

Deliver your result in the best professional quality you can produce. Polish your solution. Make a master piece out
of it.  It is part of this task to compare what different people consider to be a professional quality solution.


Task Description

Program should create Order Books according to orders from XML file:

https://yadi.sk/d/cciS7Dqy35uQjU

Two actions supported: new order, delete exiting order. And after processing the whole file, print to standard output
all order books generated.

What is Order Book?

Order Book is basically a combination of bid ladder and ask ladder. Bid ladder consists from buy orders; ask ladder
consists from sell orders. See example order book and format of output for your program:

Order book: ${order_book_name}

BID                  ASK

Volume@Price – Volume@Price

10@100.1  – 11@100.2

4@100.0    – 14@100.21

98@99.98  – 14@100.23

-----------      – 12@101.00


Bid ladder is sorted from the highest bid price at the top to lowest price at the bottom.

Ask ladder – visa versa, sorted from lowest at the top to highest price at the bottom.


Note: when printing out resulted order books - quantity for all orders with the same price should be aggregated.
In other words – on each side (bid / ask) of order book can have only one level with particular price.

Note: You don’t need to check XML file for correctness and implement any safety checks.

Note: There are several different order books in XML file (see ‘book’ attribute)



Matching logic:

When new bid/ask order is added into order book you should check opposite book side for matching. Checking always
starts from the top of opposite side. To get execution (matching) price of counter orders must overlap (bid>=ask).
For example:

bid order at 4.4 matches ask order at 4.3
ask order at 3.7 matches bid order at 3.8
opposite side orders with same price matches as well.


Matching is a process of execution two counter orders. When orders are matched they current volume is decreased by
minimum current volumes of these orders:  volume_executed=min(ask_order,bid_order).  So when there is a match you
need to adjust orders quantities. There could be three cases:

Order existing in order book fully filled by incoming order à remove existing, adjust quantity of incoming order and
add it Incoming order fully filled by existing order à adjust quantity of existing order
Full quantity match à Remove existing order


Also
Describe do’s and don’ts of your solution, what could be done to speed it up further, improve, simplify?

файл данных https://yadi.sk/d/cciS7Dqy35uQjU

http://job4j.ru/posts/tests-task-order-import.html



Описание заявки.

Вам необходим разработать систему трейдинга.

В систему поступают заявки.

Заявки двух типов: выставить заявку и убрать с торгов.

Каждая заявки имеет эммитента. Это поле указывает идентификатор ценной бумаги.

Например. Мы ходим купить Акции ГазПрома. Мы посылаем заявку на приобретение акций ГазПрома.

Ниже описание всех полей заявки

id - уникальный ключ заявки.

book - идентификатор ценной бумаги.

type - add/delete - выставить заявку на торги или снять

action - bid/ask - заявка имеет два действия. Заявка на покупка ценной бумаги или на продажу.

price - цена, по которой мы ходим сделать действия покупки или продажи.

volume - количество акций, которые мы ходим продать или купить.



Действия системы.

1. В системы должны быть стаканы - Это списки всех заявок относящиеся к одному эммитенту.

2. Когда в системы пришла заявка, надо определить в какому стакану она принадлежит.

3. Далее по типу заявки. Если заявка на снятие с торгов нужно ее удалить их стакана.

4. Если заявка на добавления. Нужно ее добавить в стакан.

Процесс добавления заявки в стакан.

Стакан - это заявки одного эммитента упорядоченные по убывания цены.

1. Сначала заявки нужно сгруппировать по принципу - покупка. продажа. То есть у вас будет два списка.

2. Заявки нужно держать по убывания цены. Сначала заявки с самой большой ценной.

Процесс продажи/покупки.

1. После того. когда заявка попадает в стакан, нужно понять. нет ли в стакане заявки противоположного действия, которое можно совместить.

Например. Приходит заявка на покупку 10 акций ГазПром по цене 11 рублей.

В стакане есть заявки на продажу 9 акций ГазПрома по цене 10 рублей.

В этом случае мы видим. что можем это заявки совместить. мы можем продать 9 акций по цене 10 рублей. клиенту, который хочет купить 10 акций по удобной для него цене.

В этом случае мы вычитаем объемы. Если у заявки объем 0. мы убираем ее из стакана.

Если больше 0. то оставляем. но уменьшаем объем.

Процесс отображение стакана.

1. Для пользователя системы не важно сколько заявок пришло в систему. для него важно количество акций на покупку и продажу.

Поэтому когда мы выводим стакан, мы должны показать три столбика

Продажа Цена Покупка



Первый столбец мы заполняем количеством заявок на покупку.

Третий столбик мы заполняем количеством заявок на продажу.

Центральный столбей отображает цены.

2. Если у заявки одинаковая цена, эти заявки нужно отображать как одну со сложенной суммой количества акций.

Например.

Две заявки на покупку по цене 10 рублей. одна на 45 акций. вторая на 16.

В стакане отображаем одну строку

Покупку Цена

61         10